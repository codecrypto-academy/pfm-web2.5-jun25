"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/devisrael-docker-manager";
exports.ids = ["vendor-chunks/devisrael-docker-manager"];
exports.modules = {

/***/ "(rsc)/./node_modules/devisrael-docker-manager/dist/besu-deployer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devisrael-docker-manager/dist/besu-deployer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function() {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function(o) {\n            var ar = [];\n            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function(mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) {\n            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        }\n        __setModuleDefault(result, mod);\n        return result;\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BesuDeployer = void 0;\nconst docker_manager_1 = __webpack_require__(/*! ./docker-manager */ \"(rsc)/./node_modules/devisrael-docker-manager/dist/docker-manager.js\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nclass BesuDeployer extends docker_manager_1.DockerManager {\n    constructor(networkConfig){\n        super();\n        this.networkConfig = networkConfig;\n    }\n    /**\n     * Despliega una red completa de Besu\n     */ async deployBesuNetwork(nodes) {\n        try {\n            // 1. Limpiar red existente PRIMERO\n            await this.cleanupNetwork();\n            // 2. Limpiar datos anteriores\n            await this.cleanupPreviousData();\n            // 3. Crear directorio si no existe\n            await this.ensureDataDirectory();\n            // 4. Crear directorios y llaves para cada nodo\n            await this.createNodeDirectories(nodes);\n            // 5. Actualizar configuración con enode del bootnode\n            await this.updateConfigWithBootnode(nodes);\n            // 6. Crear red Docker\n            await this.createBesuNetwork();\n            // 7. Desplegar nodos\n            for (const node of nodes){\n                await this.deployBesuNode(node);\n                // Esperar un poco entre despliegues\n                await this.sleep(2000);\n            }\n            console.log(`Red Besu desplegada con ${nodes.length} nodos`);\n        } catch (error) {\n            throw new Error(`Error desplegando red Besu: ${error.message}`);\n        }\n    }\n    /**\n     * Limpia datos anteriores de Besu\n     */ async cleanupPreviousData() {\n        const absolutePath = path.resolve(this.networkConfig.dataPath);\n        if (fs.existsSync(absolutePath)) {\n            console.log(\"Limpiando datos anteriores...\");\n            // Eliminar todo el directorio y recrearlo\n            this.removeDirectoryRecursive(absolutePath);\n            console.log(\"Datos anteriores eliminados\");\n        }\n    }\n    /**\n     * Elimina un directorio de forma recursiva\n     */ removeDirectoryRecursive(dirPath) {\n        if (fs.existsSync(dirPath)) {\n            fs.rmSync(dirPath, {\n                recursive: true,\n                force: true\n            });\n        }\n    }\n    /**\n     * Asegura que el directorio de datos existe\n     */ async ensureDataDirectory() {\n        const absolutePath = path.resolve(this.networkConfig.dataPath);\n        if (!fs.existsSync(absolutePath)) {\n            fs.mkdirSync(absolutePath, {\n                recursive: true\n            });\n            console.log(`Directorio creado: ${absolutePath}`);\n        }\n        // Crear archivos de configuración básicos\n        await this.createConfigFiles(absolutePath);\n    }\n    /**\n     * Crea archivos de configuración básicos para Besu\n     */ async createConfigFiles(dataPath) {\n        // Crear config.toml básico\n        const configContent = `genesis-file=\"/data/genesis.json\"\r\np2p-host=\"0.0.0.0\"\r\np2p-port=\"30303\"\r\np2p-enabled=true\r\ndiscovery-enabled=true\r\nrpc-http-enabled=true\r\nrpc-http-host=\"0.0.0.0\"\r\nrpc-http-port=8545\r\nrpc-http-cors-origins=[\"*\"]\r\nrpc-http-api=[\"ADMIN\",\"ETH\", \"CLIQUE\", \"NET\", \"TRACE\", \"DEBUG\", \"TXPOOL\", \"PERM\"]\r\nhost-allowlist=[\"*\"]`;\n        // Crear bootnode-config.toml\n        const bootnodeConfigContent = `genesis-file=\"/data/genesis.json\"\r\np2p-host=\"0.0.0.0\"\r\np2p-port=\"30303\"\r\np2p-enabled=true\r\ndiscovery-enabled=true\r\nrpc-http-enabled=true\r\nrpc-http-host=\"0.0.0.0\"\r\nrpc-http-port=8545\r\nrpc-http-cors-origins=[\"*\"]\r\nrpc-http-api=[\"ADMIN\",\"ETH\", \"CLIQUE\", \"NET\", \"TRACE\", \"DEBUG\", \"TXPOOL\", \"PERM\"]\r\nhost-allowlist=[\"*\"]`;\n        // Crear genesis.json básico\n        const genesisContent = {\n            config: {\n                chainId: 246700,\n                londonBlock: 0,\n                clique: {\n                    blockperiodseconds: 4,\n                    epochlenght: 30000,\n                    createemptyblocks: true\n                }\n            },\n            extraData: \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n            gasLimit: \"0x1fffffffffffff\",\n            difficulty: \"0x1\",\n            alloc: {}\n        };\n        // Escribir archivos\n        const configPath = path.join(dataPath, \"config.toml\");\n        const bootnodeConfigPath = path.join(dataPath, \"bootnode-config.toml\");\n        const genesisPath = path.join(dataPath, \"genesis.json\");\n        fs.writeFileSync(configPath, configContent);\n        fs.writeFileSync(bootnodeConfigPath, bootnodeConfigContent);\n        fs.writeFileSync(genesisPath, JSON.stringify(genesisContent, null, 2));\n        console.log(`Archivos creados:`);\n        console.log(`  - ${configPath}`);\n        console.log(`  - ${bootnodeConfigPath}`);\n        console.log(`  - ${genesisPath}`);\n    }\n    /**\n     * Crea directorios y archivos básicos para cada nodo\n     */ async createNodeDirectories(nodes) {\n        const basePath = path.resolve(this.networkConfig.dataPath);\n        for (const node of nodes){\n            const nodePath = path.join(basePath, node.name);\n            const dataPath = path.join(nodePath, \"data\");\n            // Crear directorios\n            fs.mkdirSync(nodePath, {\n                recursive: true\n            });\n            fs.mkdirSync(dataPath, {\n                recursive: true\n            });\n            // Generar llave privada real (32 bytes = 64 caracteres hex)\n            const privateKey = crypto.randomBytes(32);\n            const privateKeyHex = \"0x\" + privateKey.toString(\"hex\");\n            // Simular dirección (en producción usarías la derivada de la llave pública)\n            const addressBytes = crypto.randomBytes(20);\n            const address = addressBytes.toString(\"hex\");\n            // Escribir archivos - Besu necesita la llave sin salto de línea\n            fs.writeFileSync(path.join(nodePath, \"key\"), privateKeyHex, {\n                flag: \"w\"\n            });\n            fs.writeFileSync(path.join(nodePath, \"address\"), address, {\n                flag: \"w\"\n            });\n            // Si es bootnode, crear enode\n            if (node.isBootnode) {\n                // Para el enode necesitamos la clave pública (64 bytes = 128 caracteres hex)\n                const publicKeyBytes = crypto.randomBytes(64);\n                const publicKey = publicKeyBytes.toString(\"hex\");\n                const enode = `enode://${publicKey}@${node.ip}:30303`;\n                fs.writeFileSync(path.join(nodePath, \"enode\"), enode, {\n                    flag: \"w\"\n                });\n                console.log(`Enode creado para bootnode: ${enode}`);\n            }\n            console.log(`Directorio y llaves creados para ${node.name}`);\n            console.log(`  - Llave privada: ${privateKeyHex.substring(0, 18)}...`);\n            console.log(`  - Dirección: 0x${address}`);\n            // Verificar que el archivo de llave tiene el tamaño correcto\n            const keyContent = fs.readFileSync(path.join(nodePath, \"key\"), \"utf8\");\n            console.log(`  - Tamaño de llave: ${keyContent.length} caracteres`);\n        }\n    }\n    /**\n     * Actualiza la configuración con el enode del bootnode\n     */ async updateConfigWithBootnode(nodes) {\n        const basePath = path.resolve(this.networkConfig.dataPath);\n        const bootnode = nodes.find((node)=>node.isBootnode);\n        if (!bootnode) {\n            console.log(\"No se encontr\\xf3 bootnode, saltando configuraci\\xf3n de bootnodes\");\n            return;\n        }\n        // Leer el enode del bootnode\n        const enodePath = path.join(basePath, bootnode.name, \"enode\");\n        const enode = fs.readFileSync(enodePath, \"utf8\").trim();\n        // Actualizar config.toml con el bootnode\n        const configContent = `genesis-file=\"/data/genesis.json\"\r\np2p-host=\"0.0.0.0\"\r\np2p-port=\"30303\"\r\np2p-enabled=true\r\nbootnodes=[\"${enode}\"]\r\ndiscovery-enabled=true\r\nrpc-http-enabled=true\r\nrpc-http-host=\"0.0.0.0\"\r\nrpc-http-port=8545\r\nrpc-http-cors-origins=[\"*\"]\r\nrpc-http-api=[\"ADMIN\",\"ETH\", \"CLIQUE\", \"NET\", \"TRACE\", \"DEBUG\", \"TXPOOL\", \"PERM\"]\r\nhost-allowlist=[\"*\"]`;\n        const configPath = path.join(basePath, \"config.toml\");\n        fs.writeFileSync(configPath, configContent);\n        // Actualizar genesis.json con las direcciones de los validadores\n        await this.updateGenesisWithValidators(nodes);\n        console.log(`Configuración actualizada con bootnode: ${enode}`);\n    }\n    /**\n     * Actualiza el genesis.json con las direcciones de los validadores\n     */ async updateGenesisWithValidators(nodes) {\n        const basePath = path.resolve(this.networkConfig.dataPath);\n        // Obtener direcciones de nodos mineros/validadores\n        const minerNodes = nodes.filter((node)=>node.isMiner || node.isBootnode);\n        let extraData = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n        // Agregar direcciones de validadores al extraData\n        for (const node of minerNodes){\n            const addressPath = path.join(basePath, node.name, \"address\");\n            const address = fs.readFileSync(addressPath, \"utf8\").trim();\n            extraData += address;\n        }\n        // Agregar sufijo requerido para Clique\n        extraData += \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n        // Crear balance inicial para el primer minero\n        const firstMinerAddress = fs.readFileSync(path.join(basePath, minerNodes[0].name, \"address\"), \"utf8\").trim();\n        const genesisContent = {\n            config: {\n                chainId: 246700,\n                londonBlock: 0,\n                clique: {\n                    blockperiodseconds: 4,\n                    epochlenght: 30000,\n                    createemptyblocks: true\n                }\n            },\n            extraData: extraData,\n            gasLimit: \"0x1fffffffffffff\",\n            difficulty: \"0x1\",\n            alloc: {\n                [`0x${firstMinerAddress}`]: {\n                    balance: \"0x20000000000000000000000000000000000000000000000000000000000\"\n                }\n            }\n        };\n        const genesisPath = path.join(basePath, \"genesis.json\");\n        fs.writeFileSync(genesisPath, JSON.stringify(genesisContent, null, 2));\n        console.log(`Genesis actualizado con ${minerNodes.length} validadores`);\n        console.log(`  - extraData: ${extraData.substring(0, 50)}...`);\n    }\n    /**\n     * Crea la red Docker para Besu\n     */ async createBesuNetwork() {\n        await this.createNetwork({\n            name: this.networkConfig.networkName,\n            subnet: this.networkConfig.subnet,\n            labels: {\n                \"network\": this.networkConfig.networkName,\n                \"type\": \"besu\"\n            }\n        });\n    }\n    /**\n     * Despliega un nodo Besu individual\n     */ async deployBesuNode(nodeConfig) {\n        const containerOptions = this.buildBesuContainerOptions(nodeConfig);\n        console.log(`\\n--- Desplegando ${nodeConfig.name} ---`);\n        console.log(`  IP: ${nodeConfig.ip}`);\n        console.log(`  Tipo: ${this.getNodeType(nodeConfig)}`);\n        try {\n            const containerId = await this.createContainer(containerOptions);\n            console.log(`  Container ID: ${containerId.substring(0, 12)}`);\n            // Esperar un poco más para que el contenedor se inicie\n            console.log(`  Esperando que ${nodeConfig.name} se inicie...`);\n            await this.sleep(3000);\n            // Verificar que el contenedor se inició correctamente\n            const containerInfo = await this.getContainerInfo(containerId);\n            console.log(`  Estado: ${containerInfo.state}`);\n            if (containerInfo.state !== \"running\") {\n                console.log(`  ⚠️  ${nodeConfig.name} no está corriendo!`);\n            } else {\n                console.log(`  ✅ ${nodeConfig.name} funcionando correctamente`);\n            }\n            return containerId;\n        } catch (error) {\n            console.error(`❌ Error desplegando ${nodeConfig.name}:`, error);\n            throw error;\n        }\n    }\n    /**\n     * Construye las opciones del contenedor para un nodo Besu\n     */ buildBesuContainerOptions(nodeConfig) {\n        // Convertir a ruta absoluta\n        const absolutePath = path.resolve(this.networkConfig.dataPath);\n        const volumeMount = `${absolutePath}:/data`;\n        const labels = {\n            \"network\": this.networkConfig.networkName,\n            \"node-type\": this.getNodeType(nodeConfig)\n        };\n        const cmd = this.buildBesuCommand(nodeConfig);\n        const portBindings = {};\n        // Si es nodo RPC, exponer puerto\n        if (nodeConfig.isRpc) {\n            portBindings[\"8545/tcp\"] = [\n                {\n                    HostPort: \"1002\"\n                }\n            ];\n        }\n        return {\n            name: nodeConfig.name,\n            Image: \"hyperledger/besu:latest\",\n            Cmd: cmd,\n            ExposedPorts: nodeConfig.isRpc ? {\n                \"8545/tcp\": {}\n            } : undefined,\n            HostConfig: {\n                Binds: [\n                    volumeMount\n                ],\n                PortBindings: Object.keys(portBindings).length > 0 ? portBindings : undefined\n            },\n            Labels: labels,\n            networkName: this.networkConfig.networkName,\n            ip: nodeConfig.ip\n        };\n    }\n    /**\n     * Construye el comando para ejecutar Besu\n     */ buildBesuCommand(nodeConfig) {\n        const configFile = nodeConfig.isBootnode ? \"/data/bootnode-config.toml\" : \"/data/config.toml\";\n        const cmd = [\n            `--config-file=${configFile}`,\n            `--data-path=/data/${nodeConfig.name}/data`,\n            `--node-private-key-file=/data/${nodeConfig.name}/key`\n        ];\n        if (nodeConfig.isMiner) {\n            cmd.push(\"--miner-enabled=true\");\n            cmd.push(`--miner-coinbase=0x$(cat /data/${nodeConfig.name}/address)`);\n        }\n        return cmd;\n    }\n    /**\n     * Limpia la red existente\n     */ async cleanupNetwork() {\n        try {\n            // Eliminar contenedores de la red\n            await this.removeNetwork(this.networkConfig.networkName, true);\n        } catch (error) {\n            // Si la red no existe, continuar\n            console.log(\"Red no existe o ya fue eliminada\");\n        }\n    }\n    /**\n     * Obtiene el tipo de nodo para labels\n     */ getNodeType(nodeConfig) {\n        if (nodeConfig.isBootnode) return \"bootnode\";\n        if (nodeConfig.isRpc) return \"rpc\";\n        if (nodeConfig.isMiner) return \"miner\";\n        return \"validator\";\n    }\n    /**\n     * Espera un tiempo determinado\n     */ sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    /**\n     * Obtiene información de todos los nodos de la red\n     */ async getNetworkStatus() {\n        try {\n            const networkInfo = await this.getNetworkInfo(this.networkConfig.networkName);\n            return {\n                network: {\n                    name: networkInfo.name,\n                    subnet: networkInfo.config.subnet,\n                    totalNodes: networkInfo.containers.length\n                },\n                nodes: networkInfo.containers.map((container)=>({\n                        name: container.name,\n                        ip: container.ip,\n                        id: container.id\n                    }))\n            };\n        } catch (error) {\n            throw new Error(`Error obteniendo estado de la red: ${error.message}`);\n        }\n    }\n    /**\n     * Obtiene los logs de un contenedor específico (útil para debugging)\n     */ async getNodeLogs(nodeName) {\n        try {\n            // Acceder al docker instance del padre\n            const dockerInstance = this.docker;\n            const container = dockerInstance.getContainer(nodeName);\n            const logs = await container.logs({\n                stdout: true,\n                stderr: true,\n                tail: 50\n            });\n            return logs.toString();\n        } catch (error) {\n            throw new Error(`Error obteniendo logs de ${nodeName}: ${error.message}`);\n        }\n    }\n}\nexports.BesuDeployer = BesuDeployer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/devisrael-docker-manager/dist/besu-deployer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/devisrael-docker-manager/dist/docker-manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/devisrael-docker-manager/dist/docker-manager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DockerManager = void 0;\nconst dockerode_1 = __importDefault(__webpack_require__(/*! dockerode */ \"dockerode\"));\n/**\n * Clase para gestionar contenedores y redes Docker\n */ class DockerManager {\n    /**\n     * Constructor de la clase DockerManager\n     * @param options Opciones de conexión a Docker (opcional)\n     */ constructor(options){\n        this.docker = new dockerode_1.default(options);\n    }\n    /**\n     * Crea una nueva red Docker\n     * @param options Opciones para crear la red\n     * @returns Promise con el ID de la red creada\n     */ async createNetwork(options) {\n        const { name, subnet, labels = {} } = options;\n        const networkOptions = {\n            Name: name,\n            CheckDuplicate: true,\n            Driver: \"bridge\",\n            IPAM: {\n                Driver: \"default\",\n                Config: [\n                    {\n                        Subnet: subnet\n                    }\n                ]\n            },\n            Labels: labels\n        };\n        try {\n            const network = await this.docker.createNetwork(networkOptions);\n            return network.id;\n        } catch (error) {\n            throw new Error(`Error al crear la red: ${error.message}`);\n        }\n    }\n    /**\n     * Crea un nuevo contenedor Docker\n     * @param options Opciones para crear el contenedor\n     * @returns Promise con el ID del contenedor creado\n     */ async createContainer(options) {\n        const { name, ip, networkName, ...containerOptions } = options;\n        try {\n            // Crear el contenedor\n            const container = await this.docker.createContainer({\n                ...containerOptions,\n                name\n            });\n            const containerId = container.id;\n            // Si se especifica una red, conectar el contenedor a ella\n            if (networkName) {\n                const network = this.docker.getNetwork(networkName);\n                const networkConnectOptions = {\n                    Container: containerId\n                };\n                // Si se especifica una IP, configurarla\n                if (ip) {\n                    networkConnectOptions.EndpointConfig = {\n                        IPAddress: ip\n                    };\n                }\n                await network.connect(networkConnectOptions);\n            }\n            // Iniciar el contenedor\n            await container.start();\n            return containerId;\n        } catch (error) {\n            throw new Error(`Error al crear el contenedor: ${error.message}`);\n        }\n    }\n    /**\n     * Elimina un contenedor Docker\n     * @param nameOrId Nombre o ID del contenedor a eliminar\n     * @param force Si es true, fuerza la eliminación incluso si está en ejecución\n     * @returns Promise que se resuelve cuando el contenedor ha sido eliminado\n     */ async removeContainer(nameOrId, force = true) {\n        try {\n            const container = this.docker.getContainer(nameOrId);\n            await container.remove({\n                force\n            });\n        } catch (error) {\n            throw new Error(`Error al eliminar el contenedor: ${error.message}`);\n        }\n    }\n    /**\n     * Elimina todos los contenedores conectados a una red específica\n     * @param networkNameOrId Nombre o ID de la red\n     * @returns Promise que se resuelve cuando todos los contenedores han sido eliminados\n     */ async removeContainersInNetwork(networkNameOrId) {\n        try {\n            // Obtener información de la red\n            const network = this.docker.getNetwork(networkNameOrId);\n            const networkInfo = await network.inspect();\n            // Obtener los contenedores conectados a la red\n            const containerIds = Object.keys(networkInfo.Containers || {});\n            // Eliminar cada contenedor\n            for (const containerId of containerIds){\n                await this.removeContainer(containerId);\n            }\n        } catch (error) {\n            throw new Error(`Error al eliminar los contenedores de la red: ${error.message}`);\n        }\n    }\n    /**\n     * Elimina una red Docker y opcionalmente todos sus contenedores\n     * @param networkNameOrId Nombre o ID de la red a eliminar\n     * @param removeContainers Si es true, elimina todos los contenedores conectados a la red\n     * @returns Promise que se resuelve cuando la red ha sido eliminada\n     */ async removeNetwork(networkNameOrId, removeContainers = true) {\n        try {\n            // Si se solicita, eliminar primero los contenedores\n            if (removeContainers) {\n                await this.removeContainersInNetwork(networkNameOrId);\n            }\n            // Eliminar la red\n            const network = this.docker.getNetwork(networkNameOrId);\n            await network.remove();\n        } catch (error) {\n            throw new Error(`Error al eliminar la red: ${error.message}`);\n        }\n    }\n    /**\n     * Obtiene información detallada de una red Docker\n     * @param networkNameOrId Nombre o ID de la red\n     * @returns Promise con la información de la red\n     */ async getNetworkInfo(networkNameOrId) {\n        try {\n            const network = this.docker.getNetwork(networkNameOrId);\n            const info = await network.inspect();\n            const containers = await Promise.all(Object.entries(info.Containers || {}).map(async ([id, container])=>{\n                const containerInfo = await this.docker.getContainer(id).inspect();\n                return {\n                    id,\n                    name: containerInfo.Name.replace(/^\\//, \"\"),\n                    ip: container.IPv4Address?.split(\"/\")[0]\n                };\n            }));\n            return {\n                id: info.Id,\n                name: info.Name,\n                config: {\n                    subnet: info.IPAM?.Config?.[0]?.Subnet,\n                    gateway: info.IPAM?.Config?.[0]?.Gateway\n                },\n                containers\n            };\n        } catch (error) {\n            throw new Error(`Error al obtener información de la red: ${error.message}`);\n        }\n    }\n    /**\n     * Obtiene información detallada de un contenedor Docker\n     * @param containerNameOrId Nombre o ID del contenedor\n     * @returns Promise con la información del contenedor\n     */ async getContainerInfo(containerNameOrId) {\n        try {\n            const container = this.docker.getContainer(containerNameOrId);\n            const info = await container.inspect();\n            const networks = Object.entries(info.NetworkSettings.Networks || {}).map(([name, network])=>({\n                    name,\n                    ip: network.IPAddress\n                }));\n            return {\n                id: info.Id,\n                name: info.Name.replace(/^\\//, \"\"),\n                state: info.State.Status,\n                networks\n            };\n        } catch (error) {\n            throw new Error(`Error al obtener información del contenedor: ${error.message}`);\n        }\n    }\n}\nexports.DockerManager = DockerManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/devisrael-docker-manager/dist/docker-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/devisrael-docker-manager/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/devisrael-docker-manager/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BesuDeployer = exports.DockerManager = void 0;\nvar docker_manager_1 = __webpack_require__(/*! ./docker-manager */ \"(rsc)/./node_modules/devisrael-docker-manager/dist/docker-manager.js\");\nObject.defineProperty(exports, \"DockerManager\", ({\n    enumerable: true,\n    get: function() {\n        return docker_manager_1.DockerManager;\n    }\n}));\nvar besu_deployer_1 = __webpack_require__(/*! ./besu-deployer */ \"(rsc)/./node_modules/devisrael-docker-manager/dist/besu-deployer.js\");\nObject.defineProperty(exports, \"BesuDeployer\", ({\n    enumerable: true,\n    get: function() {\n        return besu_deployer_1.BesuDeployer;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/devisrael-docker-manager/dist/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGV2aXNyYWVsLWRvY2tlci1tYW5hZ2VyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ3BELElBQUlRLG1CQUFtQkMsbUJBQU9BLENBQUMsOEZBQWtCO0FBQ2pEekIsaURBQWdEO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9XLGlCQUFpQkQsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xJLElBQUlHLGtCQUFrQkQsbUJBQU9BLENBQUMsNEZBQWlCO0FBQy9DekIsZ0RBQStDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9hLGdCQUFnQkosWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9IUCxhQUFhVSxtQkFBT0EsQ0FBQyw0RUFBUyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jlc3UtbmV0d29yay1hcGkvLi9ub2RlX21vZHVsZXMvZGV2aXNyYWVsLWRvY2tlci1tYW5hZ2VyL2Rpc3QvaW5kZXguanM/YzRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CZXN1RGVwbG95ZXIgPSBleHBvcnRzLkRvY2tlck1hbmFnZXIgPSB2b2lkIDA7XG52YXIgZG9ja2VyX21hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL2RvY2tlci1tYW5hZ2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRG9ja2VyTWFuYWdlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9ja2VyX21hbmFnZXJfMS5Eb2NrZXJNYW5hZ2VyOyB9IH0pO1xudmFyIGJlc3VfZGVwbG95ZXJfMSA9IHJlcXVpcmUoXCIuL2Jlc3UtZGVwbG95ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCZXN1RGVwbG95ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJlc3VfZGVwbG95ZXJfMS5CZXN1RGVwbG95ZXI7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJCZXN1RGVwbG95ZXIiLCJEb2NrZXJNYW5hZ2VyIiwiZG9ja2VyX21hbmFnZXJfMSIsInJlcXVpcmUiLCJiZXN1X2RlcGxveWVyXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/devisrael-docker-manager/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/devisrael-docker-manager/dist/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/devisrael-docker-manager/dist/types.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGV2aXNyYWVsLWRvY2tlci1tYW5hZ2VyL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXN1LW5ldHdvcmstYXBpLy4vbm9kZV9tb2R1bGVzL2RldmlzcmFlbC1kb2NrZXItbWFuYWdlci9kaXN0L3R5cGVzLmpzPzFhNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/devisrael-docker-manager/dist/types.js\n");

/***/ })

};
;
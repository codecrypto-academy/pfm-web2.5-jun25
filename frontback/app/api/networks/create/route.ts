import { NextResponse } from 'next/server';
import { BesuNetworkBuilder } from 'besu-sdk';
import { promises as fs } from 'fs';
import * as path from 'path';

// Define a hardcoded configuration for the development network
const devNetworkConfig = {
  name: 'deleteme',
  chainId: 123123,
  rpcPort: 9998,
  subnet: '172.25.0.0/16', // Using a distinct subnet to avoid conflicts
  validatorIp: '172.25.0.10',
  rpcNodeIp: '172.25.0.11'
};

export async function POST() {
  console.log(`[API] Received request to create development network: ${devNetworkConfig.name}`);
  
  const networksDir = path.join(process.cwd(), 'app', 'networks');
  const finalNetworkJsonPath = path.join(networksDir, `${devNetworkConfig.name}.json`);

  // Check if the network configuration file already exists
  try {
    await fs.access(finalNetworkJsonPath);
    console.log(`[API] Network configuration '${devNetworkConfig.name}.json' already exists.`);
    return NextResponse.json({ error: `Network '${devNetworkConfig.name}' already exists.` }, { status: 409 });
  } catch (error) {
    // File doesn't exist, which is what we want. Proceed.
  }

  // Use a temporary directory to store the full network data generated by the SDK
  const tempDataDir = path.join(process.cwd(), '.tmp_besu_sdk');

  try {
    console.log('[API] Initializing BesuNetworkBuilder...');
    const builder = new BesuNetworkBuilder();

    await builder
      .withNetworkName(devNetworkConfig.name)
      .withChainId(devNetworkConfig.chainId)
      .withBlockPeriod(2)
      .withSubnet(devNetworkConfig.subnet)
      .withDataDirectory(tempDataDir) // SDK will create files here
      .addValidator('validator-1', devNetworkConfig.validatorIp)
      .addRpcNode('rpc-1', devNetworkConfig.rpcNodeIp, devNetworkConfig.rpcPort) // Corrected typo
      .build(); // This creates and starts the Docker containers

    console.log('[API] Besu network built and started successfully.');

    // The SDK creates a layout like: <tempDataDir>/<networkName>/network.json
    const sdkGeneratedJsonPath = path.join(tempDataDir, devNetworkConfig.name, 'network.json');

    console.log(`[API] Reading generated network config from: ${sdkGeneratedJsonPath}`);
    const networkJsonContent = await fs.readFile(sdkGeneratedJsonPath, 'utf-8');
    
    // Ensure the destination directory exists
    await fs.mkdir(networksDir, { recursive: true });

    console.log(`[API] Writing final network config to: ${finalNetworkJsonPath}`);
    await fs.writeFile(finalNetworkJsonPath, networkJsonContent);

    // Clean up the temporary directory
    console.log(`[API] Cleaning up temporary directory: ${tempDataDir}`);
    await fs.rm(tempDataDir, { recursive: true, force: true });
    
    console.log('[API] Network creation process completed successfully.');
    return NextResponse.json({ message: 'Network created successfully', network: JSON.parse(networkJsonContent) });

  } catch (err: any) { // Correctly typed error
    console.error('[API] Error during network creation:', err);
    
    // Attempt to clean up temp dir even on failure
    try {
      await fs.rm(tempDataDir, { recursive: true, force: true });
    } catch (cleanupError) {
      console.error('[API] Failed to cleanup temp directory after an error:', cleanupError);
    }

    return NextResponse.json(
      { error: 'Failed to create network', details: err.message },
      { status: 500 }
    );
  }
} 